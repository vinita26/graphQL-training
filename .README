Day1 :12-March-2024
----------------------------


https://bass.netcracker.com/display/NCInsights/GraphQL+training


REST - CRUD                           
--------
http  - GET            -> RETRIEVE                                   GraphQL  -  Query
           PUT           -> UPDATE                                       Mutation  -> CREATE,UPDATE,DELETE
           POST        -> CREATE                                       Subscription 
           PATCH      -> PARTIAL UPDATE
           DELETE    -> DELETE
  

https://jsonplaceholder.typicode.com/



/posts	100 posts
/comments	500 comments
/albums	100 albums
/photos	5000 photos
/todos	200 todos
/users	10 users



query getTodoWithTodoId($todoId:Int) {
  todos(where: {id: {_eq: $todoId}}) {
    id
    is_completed
    title
    is_public
    user_id
  }
}


mutation updateTodo {
  update_todos_by_pk(pk_columns: {id:580}, _set: {is_completed: true, title: "Practice makes man perfect"}) {
    id
    is_completed
    title
  }
}


Day2 :13-March-2024
----------------------------
Agenda
-----------
Develop a GraphQL API using ApolloServer to perform CRUD Operations on User and Post Resource.

https://graphql.org/learn/ 










schema.js
---------------

mkdir json-placholder-graphql-app

cd json-placholder-graphql-app

npm init -y

npm install @apollo/server graphql
npm i -g nodemon
npm i nodemon




export const typeDefs=`#graphql
  
  type User{
    id:ID!,
    name: String,
    username:String
  }

  type Query {
    greeting: String,
    welcome: String,
    hello:String,
    bye:String,
    users:[User],
    user(id:ID!):User 
  }


  input createUserInput{
    id:ID!,
    name: String,
    username:String
  }

  input updateUserInput{
    id:ID!,
    name: String,
    username:String
  }

  
  type Mutation {
    createUser(user: createUserInput!) : User,
    updateUser(user: updateUserInput!) : User,
    deleteUser(id:ID!) : [User],
  }
`;




db.js
---------
let users = [
    { "id": 1, "name": "Leanne Graham", "username": "Bret" },
    { "id": 2, "name": "Ervin Howell", "username": "Antonette" },
    { "id": 3, "name": "Clementine Bauch", "username": "Samantha" },
    { "id": 4, "name": "Patricia Lebsack", "username": "Karianne" },
    { "id": 5, "name": "Chelsey Dietrich", "username": "Kamren" }
];

export default {users};



server.js
------------

import { ApolloServer } from '@apollo/server'
import { startStandaloneServer } from '@apollo/server/standalone'

import db from '../db.js';

// types
import { typeDefs } from './schema.js'

const resolvers = {

    // Resolvers for Queries
    Query: {
        greeting: () => 'Greeting GraphQL world!ğŸ‘‹',
        welcome: () => 'Welcome GraphQL world!ğŸ‘‹',
        hello: () => 'Hello GraphQL world!ğŸ‘‹',
        bye: () => 'Good Bye GraphQL world!ğŸ‘‹',
        
        users: () => db.users,
        user: (_,args) => db.users.filter(u => u.id == args.id)[0]
    },

    // Resolvers for Mutations
    Mutation: {
        createUser:(_,{user})=>{  db.users.push(user);
             console.log("create",user); return user;},
       
         updateUser:(_,{user})=>{ 
            db.users.forEach((u,i)=>{if(u.id==user.id)
            db.users[i]=user;
            }); 
            console.log("update",user); 
            return user},
        
         deleteUser:(_,{id})=>{ console.log("delete",id);
          db.users=db.users.filter(u=>u.id!=id);
          return db.users;
          },
    },
};

// server setup
const server = new ApolloServer({
  typeDefs,
  resolvers
})

const { url } = await startStandaloneServer(server, {
  listen: { port: 4000 }
})

console.log(`Server ready at: ${url}`)

--------------------------------------------------------------------------












